[{
  "_id": {
    "$oid": "666725605b2db668175d3119"
  },
  "description": {
    "de": "**Launch-Ankündigung: Willkommen zur Version 1.0 meiner Website!**\n\n*Veröffentlicht am: 22. April 2024*\n\nHallo Welt!\n\nIch freue mich, ankündigen zu können, dass ab heute, dem 22. April, die Version 1.0 meiner persönlichen Website offiziell online ist! Diese erste Version ist ein wichtiger Meilenstein auf meinem Weg als Entwickler, und ich freue mich darauf, Ihnen mitzuteilen, was derzeit verfügbar ist und was noch vor Ihnen liegt.\n\n## Was ist in Version 1.0 verfügbar?\n\nIn diesem Stadium konzentriert sich die Website auf die Kernfunktionen:\n\n- **Startseite**: Eine kurze Einführung, wer ich bin und was Sie von dieser Website erwarten können.\n- **Über mich**: Einblicke in meinen persönlichen und beruflichen Hintergrund.\n- **Über diese Website**: Einblicke in den Aufbau dieser Website, die verwendeten Tools und Technologien.\n\n## Was ist von zukünftigen Aktualisierungen zu erwarten?\n\nHier sind einige der Verbesserungen und neuen Funktionen, auf die Sie sich freuen können:\n\n- **Neue Registerkarten**: \n  - **Kontaktieren Sie mich**: Ein Bereich, in dem Sie mich direkt erreichen können.\n  - **Aktuelle Beiträge**: Regelmäßige Updates und Blogbeiträge über meine Erfahrungen und Einblicke in die Technologie.\n  - **Technische Einblicke**: Tiefer gehende Einblicke in technische Themen und Anleitungen.\n\n- **Benutzer-Interaktionen**:\n  - **Anmelde-/Registrierungsfunktionen**: Melden Sie sich sicher an und interagieren Sie persönlicher mit den Inhalten.\n  - **Abonnieren**: Optionen zum Abonnieren von Newslettern oder Updates, um Sie über neue Inhalte auf dem Laufenden zu halten.\n\n- **Zusätzliche Ressourcen**:\n  - **Tools**: Ich werde kleine Tools und Dienstprogramme zur Verfügung stellen, die Sie herunterladen und verwenden können.\n  - **Fehlerbehebung und Herausforderungen**: Diskussionen über Probleme, auf die ich bei der Entwicklung der Website gestoßen bin, und wie ich sie gelöst habe.\n\n## Reflexionen über die Entwicklung\n\nDie Entwicklung dieser Website war interessant, oft auch herausfordernd und ermöglichte es mir Neues zu lernen. Von der Konfiguration von CI/CD-Pipelines bis zur Verwaltung von Backend-Diensten auf Docker hat mir jeder Schritt wertvolle Erkenntnisse gebracht, die ich in ausführlichen Blogbeiträgen weitergeben möchte.\n\nVielen Dank für Ihren Besuch, und halten Sie diese Seite im Auge, um bald weitere Updates zu erhalten!",
    "en": "**Launch Announcement: Welcome to Version 1.0 of My Website!**\n\n*Published on: April 22, 2024*\n\nHello World!\n\nI'm thrilled to announce that as of today, April 22, Version 1.0 of my personal website is officially live! This initial release marks a significant milestone in my journey as a developer and I'm excited to share what's currently up and running, as well as what lies ahead.\n\n## What's Available in Version 1.0?\n\nAt this stage, the website focuses on core functionalities:\n\n- **Home Page**: A brief introduction to who I am and what you can expect from this website.\n- **About Me Page**: Insights into my personal and professional background.\n- **About This Website Page**: Insights into how this website was built, the tools and technologies used.\n\n## What to Expect in Future Updates?\n\nWhile I'm pleased with the foundation that Version 1.0 lays down, there's much more to come in subsequent updates. Here are a few of the enhancements and new features you can look forward to:\n\n- **New Tabs**: \n  - **Contact Me**: A space where you can reach out directly to me.\n  - **Latest Posts**: Regular updates and blog posts about my experiences and insights into technology.\n  - **Tech Insights**: Deeper dives into technical topics and tutorials.\n\n- **User Interactions**:\n  - **Login/Registration Features**: Securely log in and interact more personally with the content.\n  - **Subscribe**: Options to subscribe to newsletters or updates to keep you informed on new content.\n\n- **Additional Resources**:\n  - **Published Tools**: I'll be sharing small tools and utilities that you can download and use.\n  - **Troubleshooting and Challenges**: Discussions about problems I encountered while developing the website and how I resolved them.\n\n## Reflections on Development\n\nDeveloping this website was a journey filled with learning and occasional challenges. From configuring CI/CD pipelines to managing backend services on Docker, each step provided me with valuable insights, which I plan to share through detailed blog posts.\n## Stay Tuned!\n\nI'm committed to making this website not only a showcase of my skills but also a resource for other junior developers. Whether you're here to learn something new or simply to see what I've been up to, I appreciate your visit and look forward to growing this site together with you.\n\nThank you for stopping by, and keep an eye on this space for more updates soon!"
  },
  "_class": "com.example.myproject.model.Blogpost"
},
{
  "_id": {
    "$oid": "6668034ec505179ce9ef5b80"
  },
  "description": {
    "de": "**Update auf Version 1.1 meiner Website!**\n\n*Veröffentlicht am: Mai 30, 2024*\n\nHallo Welt!\n\nIch habe das Frontend meiner Website aktualisiert, um es an die obersten Prioritäten auf meiner To-Do-Liste anzupassen. Hier ist, was neu ist und was Sie in Zukunft erwarten können.\n\n## Was ist neu in Version 1.1?\n\nHier sind die neuesten Funktionen:\n\n- **Sprachübersetzung**: Die Website unterstützt jetzt auch Deutsch. Sie können die Sprache in der oberen rechten Ecke auswählen.\n- **Design-Verbesserungen**: Ich habe Akkordeon-Komponenten aus Material UI integriert, um die Zugänglichkeit und Navigation zu verbessern. Außerdem habe ich anklickbare Bilder hinzugefügt, die sich bei Interaktion vergrößern, um das visuelle Erlebnis zu verbessern. \n\n## Was können Sie in den nächsten Updates erwarten?\n\nEs geht weiter! Erwarten Sie bald weitere Verbesserungen und neue Funktionen:\n\n- **Blog-Beiträge**: Zukünftige Blogbeiträge werden auch auf Deutsch verfügbar sein. Um dies zu erreichen, werde ich die Blog.java-Klassen im Backend anpassen müssen.\n- **AWS-Optimierung**: Ich plane, die AWS-Kosten zu optimieren und möglicherweise von EC2-Instanzen zu Fargate zu wechseln.\n\nVielen Dank für Ihren Besuch und behalten Sie diesen Bereich im Auge, um bald weitere Updates zu erhalten!",
    "en": "**Update to Version 1.1 of My Website!**\n\n*Published on: May 30, 2024*\n\nHello World!\n\nI've updated the frontend of my website to align with the top priorities on my to-do list. Here's what's new and what you can expect in the future.\n\n## What's New in Version 1.1?\n\nHere are the latest features:\n\n- **Language Translation**: The website now supports German. You can select the language from the top right corner.\n- **Design Improvements**: I've incorporated accordion components from Material UI to enhance accessibility and navigation. Additionally, I've added clickable images that enlarge on interaction for a better visual experience. \n\n## What to Expect in Near Future Updates?\n\nThe journey doesn't stop here! Expect more enhancements and new features soon:\n\n- **Blog Posts**: Future blog posts will also be available in German. To achieve this, I will need to modify the Blog.java classes in the backend.\n- **AWS Optimization**: I'm planning to optimize AWS costs, possibly switching to Fargate from EC2 instances.\n\nThank you for stopping by, and keep an eye on this space for more updates soon!"
  },
  "_class": "com.example.myproject.model.Blogpost"
},
{
  "_id": {
    "$oid": "66e975cfbc9510c3f117593a"
  },
  "description": {
    "de": "**Neue Position als ERP Projektleiter bei Opacc**\n\n*Veröffentlicht am: 18. September 2024*\n\nHallo Welt!\n\nIch habe im September eine neue Position als ERP Projektleiter bei **Opacc** angetreten. In dieser Rolle arbeite ich häufig mit Code und entwickle oft neue Funktionen oder passe bestehende an, je nach den Anforderungen des Projekts.\n\nDiese Position ermöglicht es mir auch, mein Hintergrundwissen im **Prozessmanagement** anzuwenden und die Kenntnisse aus meinem Studium der **Wirtschaftsinformatik** zu nutzen. Diese Kombination von Fähigkeiten ist hilfreich, um die Abläufe des Unternehmens zu unterstützen und zu verbessern.\n\nIch freue mich auf die bevorstehenden Aufgaben.\n",
    "en": "**New Position as ERP Project Manager at Opacc**\n\n*Published on: September 18, 2024*\n\nHello World!\n\nI have recently started a new position as an ERP Project Manager at **Opacc** in September. In this role, I frequently work with code and often need to develop new features or modify existing ones as part of my responsibilities.\n\nThis position also allows me to apply my background in **process management** and utilize the knowledge I gained during my **Business Information** studies. The combination of these skills is valuable in supporting the company's operations and helping to improve workflows.\n\nLooking forward to the work ahead.\n"
  },
  "_class": "com.example.myproject.model.Blogpost"
},
{
  "_id": {
    "$oid": "673b0e4c8ef2334998ed48c8"
  },
  "description": {
    "de": "## Migration von AWS EC2 zu AWS Fargate: Meine Erfahrungen und Herausforderungen\n\n*Veröffentlicht am: 18. November 2024*\n\nHallo Welt!\n\nIn einem meiner früheren Blogbeiträge habe ich bereits angekündigt, dass ich eine Migration von <span style=\"color:#555555;\">AWS EC2</span> zu <span style=\"color:#555555;\">AWS Fargate</span> planen würde. Nun ist die Migration abgeschlossen, und ich möchte heute über die <span style=\"color:#555555;\">Herausforderungen</span> und <span style=\"color:#555555;\">Änderungen</span> berichten, die dabei aufgetreten sind.\n\n## Fargate vs EC2: Vor- und Nachteile\n\nBevor ich in meine persönlichen Erfahrungen eintauche, möchte ich kurz die wichtigsten Vor- und Nachteile von <span style=\"color:#555555;\">AWS EC2</span> und <span style=\"color:#555555;\">AWS Fargate</span> zusammenfassen:\n\n** Vorteile von Fargate\n- **Automatische Skalierung:** Fargate übernimmt das Management der Infrastruktur automatisch, sodass du dich nicht um EC2-Instanzen kümmern musst. Das erleichtert das Management erheblich.\n- **Kostenkontrolle:** Bei Fargate zahlst du nur für die Ressourcen, die tatsächlich verwendet werden. Das hilft, die Kosten besser zu kontrollieren, besonders wenn deine Anwendungen variierende Lasten haben.\n- **Einfache Handhabung:** Du musst keine EC2-Instanzen verwalten oder skalieren. Das spart viel Zeit und Aufwand und reduziert die Komplexität der Infrastrukturverwaltung.\n- **Integrierte Netzwerksicherheit:** Fargate basiert auf VPC und integriert sich gut mit den Sicherheitsfunktionen von AWS, was die Netzwerksicherheit verbessert.\n\n** Nachteile von Fargate\n- **Kosten pro Ressource:** Bei sehr großen Anwendungen oder hohen Lasten kann Fargate teurer werden, da die Abrechnung nach tatsächlichem Ressourcenverbrauch erfolgt und keine \"Reserved Instances\" genutzt werden können.\n- **Weniger Kontrolle:** Für fortgeschrittene Nutzer, die sehr spezifische Anforderungen an die zugrunde liegende Infrastruktur haben, kann die mangelnde Kontrolle über diese Infrastruktur ein Nachteil sein. Fargate abstrahiert viele Details, was in manchen Szenarien unvorteilhaft sein kann.\n\n## Meine Herausforderungen bei der Migration\n\nDie Migration von <span style=\"color:#555555;\">EC2</span> zu <span style=\"color:#555555;\">Fargate</span> war eine spannende, aber nicht ganz unkomplizierte Erfahrung. Insbesondere die Änderungen in den <span style=\"color:#555555;\">Task Definitions</span> führten zu einigen unerwarteten Herausforderungen, die ich im Folgenden näher erläutere.\n\nEine der größten Änderungen bei der Migration betraf die <span style=\"color:#555555;\">Port-Konfigurationen</span>. In meiner EC2-Task-Definition war der <span style=\"color:#555555;\">Frontend-Container</span> auf Port 80 konfiguriert, da dieser Port vorher von Traefik belegt war. Mit der Migration zu Fargate musste ich jedoch den Port des Frontend-Containers auf <span style=\"color:#555555;\">8082</span> ändern, da <span style=\"color:#555555;\">Traefik</span> in der Fargate-Umgebung den Port 80 für die Weiterleitung des HTTP-Verkehrs selbst benötigt.\n\nAußerdem musste ich den <span style=\"color:#555555;\">Backend-Container</span> ebenfalls auf einen neuen Port umstellen. In der EC2-Umgebung war der Container noch auf Port 8080 konfiguriert. Nach der Migration entschied ich mich, den Backend-Container auf Port <span style=\"color:#555555;\">8081</span> umzustellen, weil ich keine Standardports verwenden wollte.\n\n**Warum diese Änderungen notwendig waren:**\n- **Port 80 für Traefik:** In der EC2-Umgebung konnte Traefik den Verkehr über den Host-Server-Port (80) weiterleiten, was direkt an die Container weitergereicht wurde. In Fargate jedoch übernimmt Traefik die Verwaltung der Ports, sodass der Port 80 für den HTTP-Verkehr in Fargate reserviert werden musste.\n- **Vermeidung von Standardports:** Der Grund für die Änderung des Backend-Ports von 8080 auf 8081 war, dass ich keine Standardports verwenden wollte, um Konflikte zu vermeiden und mehr Flexibilität bei der Verwaltung der Container zu haben.\n\nEin weiteres Problem, mit dem ich konfrontiert war, betraf die <span style=\"color:#555555;\">Portweiterleitung</span> durch Traefik und die Kommunikation zwischen den Containern. Während ich auf EC2 eine relativ einfache <span style=\"color:#555555;\">portMappings</span>-Konfiguration hatte, war es in Fargate etwas komplexer. Insbesondere musste ich sicherstellen, dass die <span style=\"color:#555555;\">Traefik-Labels</span> korrekt definiert waren, um den Datenverkehr zwischen den Containern richtig zu leiten.\n\nDiese Konfiguration in Fargate ist etwas komplexer als auf EC2, da die Container nun in einem <span style=\"color:#555555;\">Virtual Private Cloud (VPC)</span>-Netzwerk laufen, was bedeutet, dass alle Container explizit für die Kommunikation miteinander konfiguriert werden müssen. Dazu gehören auch <span style=\"color:#555555;\">Health-Checks</span>, die sicherstellen, dass alle Container ordnungsgemäß laufen und miteinander kommunizieren können.\n\n## Fazit\n\nTrotz der anfänglichen Herausforderungen war die Migration von <span style=\"color:#555555;\">EC2</span> zu <span style=\"color:#555555;\">Fargate</span> eine wertvolle Erfahrung. Es gab technische Stolpersteine, insbesondere bei der Konfiguration der Ports und der Weiterleitung des Traffics durch Traefik als Reverse Proxy, aber durch sorgfältige Anpassungen und Tests konnte ich am Ende eine stabile und skalierbare Architektur auf Fargate implementieren.\n\nDie Vorteile von Fargate, wie die vereinfachte Verwaltung und automatische Skalierung, haben die anfänglichen Hürden mehr als wettgemacht. Aus meiner Sicht wird Fargate auch in zukünftigen Projekten eine bevorzugte Wahl sein, da es mir ermöglicht, mich stärker auf die Anwendungslogik zu konzentrieren, anstatt mich mit den Details der Infrastrukturverwaltung auseinanderzusetzen.\n\nIch hoffe, dieser Einblick in meine Migrationserfahrungen war für euch hilfreich!\n\nBis zum nächsten Update!\n",
    "en": "## Migration from AWS EC2 to AWS Fargate: My Experiences and Challenges\n\n*Published on: November 18, 2024*\n\nHello World!\n\nIn one of my earlier blog posts, I mentioned my plan to migrate from <span style=\"color:#555555;\">AWS EC2</span> to <span style=\"color:#555555;\">AWS Fargate</span>. Now that the migration is complete, I want to share the <span style=\"color:#555555;\">challenges</span> and <span style=\"color:#555555;\">changes</span> I encountered during the process.\n\n## Fargate vs EC2: Pros and Cons\n\nBefore diving into my personal experiences, here is a brief summary of the main advantages and disadvantages of <span style=\"color:#555555;\">AWS EC2</span> and <span style=\"color:#555555;\">AWS Fargate</span>:\n\n**Advantages of Fargate**\n- **Automatic Scaling:** Fargate automatically manages the infrastructure, so you don’t have to worry about EC2 instances, greatly simplifying management.\n- **Cost Control:** With Fargate, you pay only for the resources you actually use, helping to control costs, especially for applications with variable workloads.\n- **Ease of Use:** You don’t need to manage or scale EC2 instances, saving time and reducing the complexity of infrastructure management.\n- **Integrated Network Security:** Fargate leverages VPC and integrates well with AWS security features, enhancing network security.\n\n**Disadvantages of Fargate**\n- **Cost Per Resource:** For large applications or high workloads, Fargate can become more expensive as it charges based on actual resource usage, without the option for \"Reserved Instances.\"\n- **Less Control:** For advanced users with specific infrastructure requirements, the lack of control over underlying infrastructure can be a drawback. Fargate abstracts many details, which may not be ideal in certain scenarios.\n\n## My Challenges During the Migration\n\nMigrating from <span style=\"color:#555555;\">EC2</span> to <span style=\"color:#555555;\">Fargate</span> was an exciting but not entirely straightforward experience. In particular, changes in the <span style=\"color:#555555;\">Task Definitions</span> led to unexpected challenges, which I will explain below.\n\nOne of the biggest changes during the migration involved <span style=\"color:#555555;\">port configurations</span>. In my EC2 task definition, the <span style=\"color:#555555;\">frontend container</span> was configured to run on port 80, as this port was previously used by Traefik. After migrating to Fargate, I had to change the frontend container's port to <span style=\"color:#555555;\">8082</span> because <span style=\"color:#555555;\">Traefik</span> needed port 80 in the Fargate environment for HTTP traffic forwarding.\n\nSimilarly, I had to reconfigure the <span style=\"color:#555555;\">backend container</span>. In the EC2 environment, the backend container used port 8080. After the migration, I decided to switch the backend container to port <span style=\"color:#555555;\">8081</span> to avoid using standard ports.\n\n**Why These Changes Were Necessary:**\n- **Port 80 for Traefik:** In the EC2 environment, Traefik could forward traffic over the host server port (80) directly to the containers. In Fargate, however, Traefik manages ports, so port 80 had to be reserved for HTTP traffic in the Fargate setup.\n- **Avoiding Standard Ports:** The decision to change the backend port from 8080 to 8081 was made to avoid conflicts and allow for more flexibility in container management.\n\nAnother issue I faced was related to <span style=\"color:#555555;\">port forwarding</span> by Traefik and inter-container communication. On EC2, I had a relatively simple <span style=\"color:#555555;\">portMappings</span> configuration. On Fargate, however, it was a bit more complex. Specifically, I needed to ensure that <span style=\"color:#555555;\">Traefik labels</span> were properly defined to route traffic correctly between containers.\n\nThis configuration is more intricate in Fargate because the containers now run in a <span style=\"color:#555555;\">Virtual Private Cloud (VPC)</span> network. This means that all containers must be explicitly configured for communication with one another. This also includes <span style=\"color:#555555;\">health checks</span> to ensure all containers are running correctly and communicating seamlessly.\n\n## Conclusion\n\nDespite the initial challenges, migrating from <span style=\"color:#555555;\">EC2</span> to <span style=\"color:#555555;\">Fargate</span> was a valuable experience. There were technical hurdles, particularly with port configurations and traffic forwarding via Traefik as a reverse proxy. However, through careful adjustments and testing, I was able to implement a stable and scalable architecture on Fargate.\n\nThe benefits of Fargate, such as simplified management and automatic scaling, outweighed the initial obstacles. In my opinion, Fargate will be a preferred choice for future projects as it allows me to focus more on application logic rather than infrastructure management details.\n\nI hope this insight into my migration experiences was helpful to you!\n\nUntil the next update!\n"
  },
  "_class": "com.example.myproject.model.Blogpost"
},
{
  "_id": {
    "$oid": "67b4e48f0f23b15821244119"
  },
  "description": {
    "de": "## Migration von AWS Fargate zu Synology NAS: Mein neues Hosting-Setup\n\n*Veröffentlicht am: 18. Februar 2025*\n\nHallo Welt!\n\nNach längerer Zeit mit <span style=\"color:#555555;\">AWS Fargate</span> habe ich mich entschieden, mein Hosting-Setup zu verändern und auf mein eigenes <span style=\"color:#555555;\">Synology NAS</span> umzuziehen. In diesem Beitrag möchte ich die Gründe für den Wechsel sowie die Herausforderungen und Verbesserungen erläutern.\n\n## Warum von AWS Fargate zu Synology NAS?\n\nUrsprünglich lief meine Anwendung über <span style=\"color:#555555;\">AWS Fargate</span>, wo die Container automatisch verwaltet wurden und ich mich nicht um die Serverinfrastruktur kümmern musste. Allerdings hatte dies auch seinen Preis.  \n\nHier sind die Hauptgründe für meinen Wechsel:\n\n- **Kostenersparnis:** AWS ist praktisch, aber für einen persönlichen oder kleinen Webservice kann sich das monatlich summieren. Mit dem Umzug spare ich mir die laufenden **AWS-Fargate-Kosten**.\n- **Eigene Hardware nutzen:** Mein **Synology NAS** läuft sowieso 24/7, also warum nicht auch als Hosting-Plattform nutzen?  \n- **Mehr Kontrolle:** Ich wollte eine Infrastruktur, die ich selbst verwalten kann, ohne von AWS-Abhängigkeiten oder Limitierungen beeinflusst zu werden.\n\n## Was bleibt von AWS?\n\nNicht alles wurde entfernt – **die CI/CD-Pipeline von GitHub zu AWS bleibt weiterhin bestehen**. Das bedeutet:\n- Der Quellcode wird bei Änderungen **automatisch in GitHub Actions** gebaut.\n- Die neuen Docker-Images werden in **AWS ECR** gespeichert.\n- Mein **Synology NAS** zieht sich die aktuellsten Images und startet die Container neu.\n\nDamit bleibt der Entwicklungs-Workflow effizient, aber das Hosting läuft nun lokal.\n\n## Cloudflare als neuer Bestandteil der Infrastruktur\n\nZusätzlich zu diesem Wechsel habe ich **Cloudflare** in mein Setup integriert.  \nCloudflare übernimmt nun folgende Aufgaben:\n- **Domain-Verwaltung:** Ich habe meine Domain von **AWS Route 53 zu Cloudflare transferiert**.\n- **HTTPS-Zertifikat:** Cloudflare stellt automatisch **ein SSL-Zertifikat** bereit.\n- **Sicherer Zugriff über Cloudflare Tunnel:** Die Website wird nicht direkt über eine offene Portfreigabe veröffentlicht, sondern über einen **Cloudflare Tunnel**, der sich mit meinem NAS verbindet. Das erhöht die Sicherheit und erspart mir öffentliche Ports im Router.\n\n## Fazit\n\nDie Migration von **AWS Fargate zu meinem eigenen Synology NAS** war eine spannende Herausforderung.  \nWährend die Cloud eine bequeme Lösung ist, war für mein spezifisches Projekt die **lokale Hosting-Option** letztendlich kosteneffizienter und bietet mir mehr Kontrolle.  \n\nMit **Cloudflare als zusätzlichen Sicherheitslayer** konnte ich den Zugriff auf meine Website optimieren, ohne direkt Ports im Router freigeben zu müssen.\n\nIch bin gespannt, wie sich dieses neue Setup bewährt und ob es langfristig genauso stabil läuft wie zuvor auf AWS.\n\nBis zum nächsten Update! 🚀\n",
    "en": "## Migration from AWS Fargate to Synology NAS: My New Hosting Setup\n\n*Published on: February 18, 2025*\n\nHello World!\n\nAfter using <span style=\"color:#555555;\">AWS Fargate</span> for a while, I decided to change my hosting setup and move to my own <span style=\"color:#555555;\">Synology NAS</span>. In this post, I’ll explain the reasons for this switch, the challenges I faced, and the improvements I made.\n\n## Why Move from AWS Fargate to Synology NAS?\n\nOriginally, my application ran on <span style=\"color:#555555;\">AWS Fargate</span>, where the containers were managed automatically, and I didn’t have to worry about the underlying server infrastructure. However, this convenience came at a cost.\n\nHere are the main reasons for my migration:\n\n- **Cost Savings:** AWS is convenient, but for a personal or small web service, costs can add up quickly. Moving to my own NAS eliminates **ongoing AWS Fargate expenses**.\n- **Utilizing My Own Hardware:** My **Synology NAS** runs 24/7 anyway, so why not use it as a hosting platform?  \n- **More Control:** I wanted an infrastructure that I could fully manage without being affected by AWS limitations or dependencies.\n\n## What Remains from AWS?\n\nNot everything has been removed – **the CI/CD pipeline from GitHub to AWS remains in place**. This means:\n- Source code changes are **automatically built using GitHub Actions**.\n- New Docker images are stored in **AWS ECR**.\n- My **Synology NAS** pulls the latest images and restarts the containers.\n\nThis keeps my development workflow efficient while shifting the hosting to a local setup.\n\n## Cloudflare as a New Part of the Infrastructure\n\nIn addition to this migration, I’ve also integrated **Cloudflare** into my setup.  \nCloudflare now handles the following tasks:\n- **Domain Management:** I transferred my domain from **AWS Route 53 to Cloudflare**.\n- **HTTPS Certificate:** Cloudflare automatically provides an **SSL certificate**.\n- **Secure Access via Cloudflare Tunnel:** Instead of exposing open ports, my website is now accessible through a **Cloudflare Tunnel**, which connects directly to my NAS. This enhances security and eliminates the need for public router port forwarding.\n\n## Conclusion\n\nThe migration from **AWS Fargate to my own Synology NAS** was an exciting challenge.  \nWhile cloud solutions are convenient, for my specific project, the **local hosting option** turned out to be more cost-effective and gave me greater control.  \n\nWith **Cloudflare as an additional security layer**, I was able to optimize access to my website without exposing ports on my router.\n\nI’m curious to see how this new setup performs in the long run and whether it remains as stable as it was on AWS.\n\nSee you in the next update! 🚀\n"
  },
  "_class": "com.example.myproject.model.Blogpost"
}]