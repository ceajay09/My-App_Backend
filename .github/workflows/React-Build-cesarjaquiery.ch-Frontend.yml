# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js cesarjaquiery.ch-Frontend

on:
  pull_request:
    branches:
      - main
    types: [closed]
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'My-App_Frontend/**'

jobs:

  build-react:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: My-App_Frontend/package-lock.json
    - run: |
        cd My-App_Frontend
        npm ci --legacy-peer-deps
        npm run build
      env:
        VITE_API_URL: ${{ '' }} #Empty String

    - name: Archive Frontend Build Artefact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-react
        path: My-App_Frontend/build

  push-to-aws:
    needs: build-react
    runs-on: ubuntu-latest
    steps:

      
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download Frontend Build Artefact
        uses: actions/download-artifact@v4
        with:
          name: frontend-react
          path: My-App_Frontend/build




      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - run: ls

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-app_frontend
          #IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: dev
        run: |
          ls -la
          echo $REGISTRY/$REPOSITORY:$IMAGE_TAG
          cd My-App_Frontend
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
    

 
